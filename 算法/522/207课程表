#### 题目描述
你这个学期必须选修numCourses门课程，记为0到numCourses-1.  
在选修某些课程之前需要一些先修课程。先修课程按数组prerequisites给出，其中prerequisites[i] = [ai,bi]，表示如果要学习课程ai则必须先学习课程bi。  
- 例如，先修课程对[0,1]表示：如果想要学习课程0，你需要先学完课程1.  
判断是否可能完成所有课程的学习？如果可以，返回true;否则，返回false.  


#### 解题思路
- 本题可约化为：课程安排图是否是有向无环图(DAG).即课程间规定了前置条件，但不能构成任何环路，否则课程前置条件将不成立。
- 思路是通过拓扑排序判断此课程安排图是否是有向无环图。拓扑排序原理：对DAG的顶点进行排序，使得对每一条有向边（u,v），均有u（在排序记录中）比v先出现。亦可以理解为对某点v而言，只有当v的所有源点均出现了，v才能出现。
- 通过课程前置条件列表prerequisites可以得到课程安排图的邻接表adjacency，以降低算法的时间复杂度。

### 广度优先遍历
算法流程：	
1.统计课程安排图中每个节点的入度，生成入度表indegress。	
2.借助一个队列queue，将所有入度为0的节点入队。		
3.当queue为空时，依次将队首节点出队，在课程安排图中删除此节点pre:	
	- 并不是真正从邻接表中删除此节点pre，而是将此节点对应所有邻接节点cur的入度-1，即indegrees[cur] -=1。		
	- 当入度-1后邻接节点cur的入度为0，说明cur所有的前驱节点已经被“删除”，此时将cur入队。		
4.在每次pre出队时，执行numCourses--:		
	- 若整个课程安排图是有向无环图（即可以安排），则所有节点一定都入队并出队过，即完成拓扑排序。换个角度说，若课程安排图中存在环，一定有节点的入度始终不为0.	
	- 因此，拓扑排序出队次数等于课程个数，返回numCourses == 0判断课程是否可以成功安排。
	
```python
class Solution:
	def canFinsh(self,numCourses,prerequisites):
		indegrees = [0 for _ in range(numCourses)]
		adjacency = [[] for _ in range(numCourses)]
		queue = collectons.deque()
		
		for cur, pre in prerequisites:
			indegrees[cur] += 1
			adjacency[pre].append(cur)
			
		for i in range(len(degrees)):
			if not indegrees[i]:
				queue.append(i)
			
		while queue:
			pre = queue.popleft()
			numCourses -=1
			for cur in adjacency[pre]:
				indegrees[cur]-=1
				if nor indegress[cur]:queue.append(cur)
		
		return numCourses == 0
```
